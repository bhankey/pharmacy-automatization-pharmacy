// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: pharmacy.proto

package pharmacyproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PharmacyServiceClient is the client API for PharmacyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PharmacyServiceClient interface {
	CreatePharmacy(ctx context.Context, in *NewPharmacy, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetPharmacies(ctx context.Context, in *PaginationRequest, opts ...grpc.CallOption) (*Pharmacies, error)
}

type pharmacyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPharmacyServiceClient(cc grpc.ClientConnInterface) PharmacyServiceClient {
	return &pharmacyServiceClient{cc}
}

func (c *pharmacyServiceClient) CreatePharmacy(ctx context.Context, in *NewPharmacy, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/pharmacyService.PharmacyService/CreatePharmacy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmacyServiceClient) GetPharmacies(ctx context.Context, in *PaginationRequest, opts ...grpc.CallOption) (*Pharmacies, error) {
	out := new(Pharmacies)
	err := c.cc.Invoke(ctx, "/pharmacyService.PharmacyService/GetPharmacies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PharmacyServiceServer is the server API for PharmacyService service.
// All implementations must embed UnimplementedPharmacyServiceServer
// for forward compatibility
type PharmacyServiceServer interface {
	CreatePharmacy(context.Context, *NewPharmacy) (*emptypb.Empty, error)
	GetPharmacies(context.Context, *PaginationRequest) (*Pharmacies, error)
	mustEmbedUnimplementedPharmacyServiceServer()
}

// UnimplementedPharmacyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPharmacyServiceServer struct {
}

func (UnimplementedPharmacyServiceServer) CreatePharmacy(context.Context, *NewPharmacy) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePharmacy not implemented")
}
func (UnimplementedPharmacyServiceServer) GetPharmacies(context.Context, *PaginationRequest) (*Pharmacies, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPharmacies not implemented")
}
func (UnimplementedPharmacyServiceServer) mustEmbedUnimplementedPharmacyServiceServer() {}

// UnsafePharmacyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PharmacyServiceServer will
// result in compilation errors.
type UnsafePharmacyServiceServer interface {
	mustEmbedUnimplementedPharmacyServiceServer()
}

func RegisterPharmacyServiceServer(s grpc.ServiceRegistrar, srv PharmacyServiceServer) {
	s.RegisterService(&PharmacyService_ServiceDesc, srv)
}

func _PharmacyService_CreatePharmacy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewPharmacy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacyServiceServer).CreatePharmacy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pharmacyService.PharmacyService/CreatePharmacy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacyServiceServer).CreatePharmacy(ctx, req.(*NewPharmacy))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmacyService_GetPharmacies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacyServiceServer).GetPharmacies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pharmacyService.PharmacyService/GetPharmacies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacyServiceServer).GetPharmacies(ctx, req.(*PaginationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PharmacyService_ServiceDesc is the grpc.ServiceDesc for PharmacyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PharmacyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pharmacyService.PharmacyService",
	HandlerType: (*PharmacyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePharmacy",
			Handler:    _PharmacyService_CreatePharmacy_Handler,
		},
		{
			MethodName: "GetPharmacies",
			Handler:    _PharmacyService_GetPharmacies_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pharmacy.proto",
}
