// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pharmacy.proto

package pharmacyproto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Pharmacy with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Pharmacy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Pharmacy with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PharmacyMultiError, or nil
// if none found.
func (m *Pharmacy) ValidateAll() error {
	return m.validate(true)
}

func (m *Pharmacy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PharmacyValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PharmacyValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PharmacyValidationError{
				field:  "Address",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PharmacyMultiError(errors)
	}
	return nil
}

// PharmacyMultiError is an error wrapping multiple validation errors returned
// by Pharmacy.ValidateAll() if the designated constraints aren't met.
type PharmacyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PharmacyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PharmacyMultiError) AllErrors() []error { return m }

// PharmacyValidationError is the validation error returned by
// Pharmacy.Validate if the designated constraints aren't met.
type PharmacyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PharmacyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PharmacyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PharmacyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PharmacyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PharmacyValidationError) ErrorName() string { return "PharmacyValidationError" }

// Error satisfies the builtin error interface
func (e PharmacyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPharmacy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PharmacyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PharmacyValidationError{}

// Validate checks the field values on NewPharmacy with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NewPharmacy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NewPharmacy with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NewPharmacyMultiError, or
// nil if none found.
func (m *NewPharmacy) ValidateAll() error {
	return m.validate(true)
}

func (m *NewPharmacy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NewPharmacyValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NewPharmacyValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NewPharmacyValidationError{
				field:  "Address",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NewPharmacyMultiError(errors)
	}
	return nil
}

// NewPharmacyMultiError is an error wrapping multiple validation errors
// returned by NewPharmacy.ValidateAll() if the designated constraints aren't met.
type NewPharmacyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NewPharmacyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NewPharmacyMultiError) AllErrors() []error { return m }

// NewPharmacyValidationError is the validation error returned by
// NewPharmacy.Validate if the designated constraints aren't met.
type NewPharmacyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NewPharmacyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NewPharmacyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NewPharmacyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NewPharmacyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NewPharmacyValidationError) ErrorName() string { return "NewPharmacyValidationError" }

// Error satisfies the builtin error interface
func (e NewPharmacyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNewPharmacy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NewPharmacyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NewPharmacyValidationError{}

// Validate checks the field values on Address with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Address) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Address with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AddressMultiError, or nil if none found.
func (m *Address) ValidateAll() error {
	return m.validate(true)
}

func (m *Address) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for City

	// no validation rules for Street

	// no validation rules for House

	if len(errors) > 0 {
		return AddressMultiError(errors)
	}
	return nil
}

// AddressMultiError is an error wrapping multiple validation errors returned
// by Address.ValidateAll() if the designated constraints aren't met.
type AddressMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddressMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddressMultiError) AllErrors() []error { return m }

// AddressValidationError is the validation error returned by Address.Validate
// if the designated constraints aren't met.
type AddressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddressValidationError) ErrorName() string { return "AddressValidationError" }

// Error satisfies the builtin error interface
func (e AddressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddress.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddressValidationError{}

// Validate checks the field values on PaginationRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PaginationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PaginationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PaginationRequestMultiError, or nil if none found.
func (m *PaginationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PaginationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetLastId() < 0 {
		err := PaginationRequestValidationError{
			field:  "LastId",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetLimit() > 5000 {
		err := PaginationRequestValidationError{
			field:  "Limit",
			reason: "value must be less than or equal to 5000",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PaginationRequestMultiError(errors)
	}
	return nil
}

// PaginationRequestMultiError is an error wrapping multiple validation errors
// returned by PaginationRequest.ValidateAll() if the designated constraints
// aren't met.
type PaginationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaginationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaginationRequestMultiError) AllErrors() []error { return m }

// PaginationRequestValidationError is the validation error returned by
// PaginationRequest.Validate if the designated constraints aren't met.
type PaginationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaginationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaginationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaginationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaginationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaginationRequestValidationError) ErrorName() string {
	return "PaginationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PaginationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaginationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaginationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaginationRequestValidationError{}

// Validate checks the field values on Pharmacies with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Pharmacies) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Pharmacies with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PharmaciesMultiError, or
// nil if none found.
func (m *Pharmacies) ValidateAll() error {
	return m.validate(true)
}

func (m *Pharmacies) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPharmacies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PharmaciesValidationError{
						field:  fmt.Sprintf("Pharmacies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PharmaciesValidationError{
						field:  fmt.Sprintf("Pharmacies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PharmaciesValidationError{
					field:  fmt.Sprintf("Pharmacies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PharmaciesMultiError(errors)
	}
	return nil
}

// PharmaciesMultiError is an error wrapping multiple validation errors
// returned by Pharmacies.ValidateAll() if the designated constraints aren't met.
type PharmaciesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PharmaciesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PharmaciesMultiError) AllErrors() []error { return m }

// PharmaciesValidationError is the validation error returned by
// Pharmacies.Validate if the designated constraints aren't met.
type PharmaciesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PharmaciesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PharmaciesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PharmaciesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PharmaciesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PharmaciesValidationError) ErrorName() string { return "PharmaciesValidationError" }

// Error satisfies the builtin error interface
func (e PharmaciesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPharmacies.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PharmaciesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PharmaciesValidationError{}
